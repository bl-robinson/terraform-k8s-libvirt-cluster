#cloud-config
# vim: syntax=yaml
#
# ***********************
# 	---- for more examples look at: ------
# ---> https://cloudinit.readthedocs.io/en/latest/topics/examples.html
# ******************************
#
# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided.
#
# Note: Content strings here are truncated for example purposes.
growpart:
  mode: auto
  devices: ['/']

fqdn: ${name}
ssh_pwauth: False
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3STIAhGO45ksAputEJh/g7QtXljdRC+gF5kgtUjDpSOkNdgx9n6ciizXCm2VmZhGrBt2mqSekO21CCfu7VIq9nK7/TQ2PowyYtzFzfzUpts5S5RPBoUKgbdShoR2sIxi9dFblYBPv7XzHle8XzBZ7/zTEBj9fHAaQic/2rojzv6OGuPYzL480Ee2XgwTLcjoYw44PT751O+QiRyh2ONYrMA7hfZAODTht77LNXj39wBJdoE2wfKfkbntxc/jmewr7GrRqywz3HbDr33L7f4zEyCgepQ79UKd6IWUFpFf9FZ+/QQz/hoaGtA8ypcP3QdvoSJPxYCi8AvOP5h0EWvQl benr@wall-e
package_update: true
package_upgrade: true
packages:
  - sudo
  - apt-transport-https
  - ca-certificates
  - curl
  - python3-scapy # These are a little big but its a workaround for my V6 problems
  - python3-netifaces # These are a little big but its a workaround for my V6 problems
manage_etc_hosts: localhost

users:
- name: benr
  ssh_authorized_keys:
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3STIAhGO45ksAputEJh/g7QtXljdRC+gF5kgtUjDpSOkNdgx9n6ciizXCm2VmZhGrBt2mqSekO21CCfu7VIq9nK7/TQ2PowyYtzFzfzUpts5S5RPBoUKgbdShoR2sIxi9dFblYBPv7XzHle8XzBZ7/zTEBj9fHAaQic/2rojzv6OGuPYzL480Ee2XgwTLcjoYw44PT751O+QiRyh2ONYrMA7hfZAODTht77LNXj39wBJdoE2wfKfkbntxc/jmewr7GrRqywz3HbDr33L7f4zEyCgepQ79UKd6IWUFpFf9FZ+/QQz/hoaGtA8ypcP3QdvoSJPxYCi8AvOP5h0EWvQl benr@wall-e
  sudo: "ALL=(ALL) NOPASSWD:ALL"
  shell: /bin/bash

write_files:
  - owner: root:root
    path: /home/debian/send_na_packet.py
    content: |
      from scapy.all import *
      import netifaces
      import time

      # Auto-detect interface and addresses
      interface = netifaces.gateways()['default'][netifaces.AF_INET][1]
      addrs = netifaces.ifaddresses(interface)

      # Get first global IPv6 address
      ipv6_addr = None
      for addr_info in addrs[netifaces.AF_INET6]:
          addr = addr_info['addr'].split('%')[0]
          if not addr.startswith('fe80:'):
              ipv6_addr = addr
              break

      # Get MAC address
      mac_addr = addrs[netifaces.AF_LINK][0]['addr']

      print(mac_addr)
      print(ipv6_addr)

      # Send unsolicited neighbor advertisement
      na_packet = IPv6(src=ipv6_addr, dst="ff02::1") / ICMPv6ND_NA(tgt=ipv6_addr, S=0, O=1) / ICMPv6NDOptDstLLAddr(lladdr=mac_addr)

      # Do a bit of backoff to allow the network to settle and ensure things all get out.
      # This is crazy fragile and should probably be a systemd unit.
      send(na_packet, iface=interface)
      time.sleep(10)
      send(na_packet, iface=interface)
      time.sleep(20)
      send(na_packet, iface=interface)
      time.sleep(30)
      send(na_packet, iface=interface)
      time.sleep(40)
      send(na_packet, iface=interface)
      print(f"Sent NA for {ipv6_addr} on {interface}")

  - owner: root:root
    path: /home/debian/install_k8s.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      echo "INFO: Installing common ...."
      apt-get update
      apt-get install -y \
          gnupg2 \
          gpg \
          software-properties-common \
          nfs-common \
          dnsutils \
          apt-transport-https \
          ca-certificates \
          curl \
          gnupg \
          lsb-release \
          containerd

      cat <<EOT > /etc/containerd/config.toml
      version = 2
      [plugins]
        [plugins."io.containerd.grpc.v1.cri"]
        [plugins."io.containerd.grpc.v1.cri".containerd]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                runtime_type = "io.containerd.runc.v2"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                  SystemdCgroup = true
      EOT
      systemctl restart containerd

      echo "INFO: Common installed."

      echo "INFO: Mounting k8s share"
      echo '${nfs_server_ip}:/data/k8s /mnt/k8s nfs4 defaults 0 0' >> /etc/fstab
      mkdir /mnt/k8s
      mount /mnt/k8s

      echo "INFO: Doing k8s prereq..."
      cat <<EOF | tee /etc/modules-load.d/k8s.conf
      br_netfilter
      EOF

      cat <<EOF | tee /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.ipv6.conf.all.forwarding = 1
      EOF
      sysctl --system
      echo "INFO: Installing K8..."
      mkdir -p -m 755 /etc/apt/keyrings
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
      chmod 644 /etc/apt/sources.list.d/kubernetes.list

      apt-get update
      apt-get install -y kubelet='1.33.3-*' kubeadm='1.33.3-*' kubectl='1.33.3-*'
      apt-mark hold kubelet kubeadm kubectl
      echo "INFO: Done Installing K8s"

      echo "INFO: Init Worker Node"
      echo "INFO: Waiting for files to exist"
      while [ ! -f /mnt/k8s/token ]; do sleep 1; done
      while [ ! -f /mnt/k8s/ca-cert-hash ]; do sleep 1; done

      echo "INFO: Join Cluster"
      # For each node, create a config file like this:
      echo "INFO: Creating kubeadm join config file"
      cat > kubeadm-join-config.yaml << EOF
      apiVersion: kubeadm.k8s.io/v1beta3
      kind: JoinConfiguration
      discovery:
        bootstrapToken:
          token: "$(cat /mnt/k8s/token)"
          apiServerEndpoint: "10.0.0.20:6443"
          caCertHashes:
          - "sha256:$(cat /mnt/k8s/ca-cert-hash)"
      nodeRegistration:
        kubeletExtraArgs:
          node-ip: "${ip_addr},${ip6_addr}"  # Update IPs for each node
      EOF

      echo "INFO: Joining cluster with dual-stack configuration"
      kubeadm join --config kubeadm-join-config.yaml
      touch /mnt/k8s/worker-complete-${name}
      echo "INFO: Check if we need to remove the join token"
      if [[ "$(ls /mnt/k8s | grep worker-complete | wc -l)" -eq ${worker_count} ]]
      then
          echo "INFO: Remove used k8s join token"
          rm /mnt/k8s/token
          rm /mnt/k8s/ca-cert-hash
          rm /mnt/k8s/worker-complete-*
      fi

      echo "10.0.0.101 container-registry.k8s.home.blrobinson.uk." >> /etc/hosts

runcmd:
  - bash /home/debian/install_k8s.sh
  - python3 /home/debian/send_na_packet.py
