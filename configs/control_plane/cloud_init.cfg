#cloud-config
# vim: syntax=yaml
#
# ***********************
# 	---- for more examples look at: ------
# ---> https://cloudinit.readthedocs.io/en/latest/topics/examples.html
# ******************************
#
# This is the configuration syntax that the write_files module
# will know how to understand. encoding can be given b64 or gzip or (gz+b64).
# The content will be decoded accordingly and then written to the path that is
# provided.
#
# Note: Content strings here are truncated for example purposes.
growpart:
  mode: auto
  devices: ['/']

fqdn: k8s-control
ssh_pwauth: False
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3STIAhGO45ksAputEJh/g7QtXljdRC+gF5kgtUjDpSOkNdgx9n6ciizXCm2VmZhGrBt2mqSekO21CCfu7VIq9nK7/TQ2PowyYtzFzfzUpts5S5RPBoUKgbdShoR2sIxi9dFblYBPv7XzHle8XzBZ7/zTEBj9fHAaQic/2rojzv6OGuPYzL480Ee2XgwTLcjoYw44PT751O+QiRyh2ONYrMA7hfZAODTht77LNXj39wBJdoE2wfKfkbntxc/jmewr7GrRqywz3HbDr33L7f4zEyCgepQ79UKd6IWUFpFf9FZ+/QQz/hoaGtA8ypcP3QdvoSJPxYCi8AvOP5h0EWvQl benr@wall-e
package_update: true
package_upgrade: true
packages:
  - sudo
  - apt-transport-https
  - ca-certificates
  - curl
manage_etc_hosts: localhost

users:
- name: benr
  ssh_authorized_keys:
    - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3STIAhGO45ksAputEJh/g7QtXljdRC+gF5kgtUjDpSOkNdgx9n6ciizXCm2VmZhGrBt2mqSekO21CCfu7VIq9nK7/TQ2PowyYtzFzfzUpts5S5RPBoUKgbdShoR2sIxi9dFblYBPv7XzHle8XzBZ7/zTEBj9fHAaQic/2rojzv6OGuPYzL480Ee2XgwTLcjoYw44PT751O+QiRyh2ONYrMA7hfZAODTht77LNXj39wBJdoE2wfKfkbntxc/jmewr7GrRqywz3HbDr33L7f4zEyCgepQ79UKd6IWUFpFf9FZ+/QQz/hoaGtA8ypcP3QdvoSJPxYCi8AvOP5h0EWvQl benr@wall-e
  sudo: "ALL=(ALL) NOPASSWD:ALL"
  shell: /bin/bash

write_files:
- owner: debian:debian
  path: /home/debian/install_k8s.sh
  permissions: '0755'
  content: |
    #!/bin/bash
    echo "INFO: Installing common ...."
    apt-get update
    apt-get install -y \
        gnupg2 \
        software-properties-common \
        nfs-common \
        dnsutils \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release \
        containerd

    cat <<EOT > /etc/containerd/config.toml
    version = 2
    [plugins]
      [plugins."io.containerd.grpc.v1.cri"]
      [plugins."io.containerd.grpc.v1.cri".containerd]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
              runtime_type = "io.containerd.runc.v2"
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                SystemdCgroup = true
    EOT
    systemctl restart containerd

    echo "INFO: Common installed."

    echo "INFO: Mounting k8s share"
    echo '${nfs_server_ip}:/data/k8s /mnt/k8s nfs4 defaults 0 0' >> /etc/fstab
    mkdir /mnt/k8s
    mount /mnt/k8s

    echo "INFO: Doing k8s prereq..."
    cat <<EOF | tee /etc/modules-load.d/k8s.conf
    br_netfilter
    EOF

    cat <<EOF | tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables = 1
    net.ipv4.ip_forward = 1
    EOF

    sysctl --system
    echo "INFO: Installing K8..."
    mkdir -p -m 755 /etc/apt/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
    chmod 644 /etc/apt/sources.list.d/kubernetes.list

    apt-get update
    apt-get install -y kubelet='1.33.3-*' kubeadm='1.33.3-*' kubectl='1.33.3-*'
    apt-mark hold kubelet kubeadm kubectl
    echo "INFO: Done Installing K8s"

    echo "INFO: Init Controlplane"
    kubeadm init --pod-network-cidr 192.168.0.0/16 --skip-phases=addon/kube-proxy

    export KUBECONFIG=/etc/kubernetes/admin.conf

    kubeadm token list | grep -v TOKEN | head -n 1 | awk '{print $1}' > /mnt/k8s/token
    openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | \
      openssl dgst -sha256 -hex | sed 's/^.* //' > /mnt/k8s/ca-cert-hash
    echo 'KUBECONFIG=/etc/kubernetes/admin.conf' >> /etc/environment
    cp /etc/kubernetes/admin.conf /mnt/k8s/admin.conf
    chmod 666 /mnt/k8s/admin.conf

    kubectl get configmap kube-proxy -n kube-system -o yaml | \
    sed -e "s/strictARP: false/strictARP: true/" | \
    kubectl apply -f - -n kube-system

    echo "10.0.0.101 container-registry.k8s.home.blrobinson.uk." >> /etc/hosts

runcmd:
  - bash /home/debian/install_k8s.sh
